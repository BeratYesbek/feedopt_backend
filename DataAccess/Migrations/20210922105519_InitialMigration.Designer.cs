// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Migrations
{
    [DbContext(typeof(NervioDbContext))]
    [Migration("20210922105519_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entity.MissingDeclaration", b =>
                {
                    b.Property<int>("MissingDeclarationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AnimalSpeciesId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("MissingDeclarationId");

                    b.HasIndex("AnimalSpeciesId");

                    b.ToTable("MissingDeclarations");
                });

            modelBuilder.Entity("Entity.concretes.AnimalCategory", b =>
                {
                    b.Property<int>("AnimalCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnimalCategoryName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AnimalCategoryId");

                    b.ToTable("AnimalCategories");
                });

            modelBuilder.Entity("Entity.concretes.AnimalSpecies", b =>
                {
                    b.Property<int>("AnimalSpeciesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AnimalCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Kind")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AnimalSpeciesId");

                    b.HasIndex("AnimalCategoryId");

                    b.ToTable("AnimalSpecies");
                });

            modelBuilder.Entity("Entity.MissingDeclaration", b =>
                {
                    b.HasOne("Entity.concretes.AnimalSpecies", "AnimalSpecies")
                        .WithMany("MissingDeclarations")
                        .HasForeignKey("AnimalSpeciesId");

                    b.Navigation("AnimalSpecies");
                });

            modelBuilder.Entity("Entity.concretes.AnimalSpecies", b =>
                {
                    b.HasOne("Entity.concretes.AnimalCategory", "AnimalCategory")
                        .WithMany("AnimalSpecies")
                        .HasForeignKey("AnimalCategoryId");

                    b.Navigation("AnimalCategory");
                });

            modelBuilder.Entity("Entity.concretes.AnimalCategory", b =>
                {
                    b.Navigation("AnimalSpecies");
                });

            modelBuilder.Entity("Entity.concretes.AnimalSpecies", b =>
                {
                    b.Navigation("MissingDeclarations");
                });
#pragma warning restore 612, 618
        }
    }
}
